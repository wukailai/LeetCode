查看linux平均负载：uptime；
top命令：查看cpu和内存占有率；
mysql什么时候加锁：insert、delete、update语句自动加拍他锁，select语句默认不加锁，但是可以显示加锁：
select * from table lock in share mode；
幂等函数：执行一次和执行多次结果一样，如getId()、setTrue()；
幂等接口设计：
    a）天然的幂等操作，查询操作，如select；
    b）可能的幂等操作，删除操作（除非删除返回值不同）；
    c）添加记录，设置唯一索引，防止新增脏数据；
    d）token机制，防止页面重复提交；
    e）使用锁：乐观锁、悲观锁、分布式锁；
事务版本号/ID：每开始一个新的事务，系统版本号都会自动递增。事务开始时刻的系统版本号会作为事务的版本号，用来和查询到的每行记录的版本号进行比较；
读分为两种：1）快照读（读老数据）；2）当前读（读新数据）；
mysql事务隔离是通过锁来实现的：
MVCC：
    a）每条记录保存行版本和删除版本隐藏行（隐藏行还包括回滚指针，用于回滚操作，如果没有指定主键，还有隐藏主键），每次数据修改更新改版本；
    b）记录更新时，复制记录，各事务之前无干扰；
    c）保存时比较版本号，如果成功（commit），则覆盖原记录；失败则放弃copy（rollback）；
MVCC特点：
    a）读不加锁；
    b）读写不冲突；
MVCC插入、删除、更新逻辑：
    a）记录刚插入的时候全局化事务ID为1，即行版本号为1，删除版本号为null；
    b）删除的记录的时候删除版本号为当前事务版本号；
    c）更新数据的时候会复制一条记录，同时标记新记录行版本号为当前事务版本号，删除版本号为null，同时更新旧记录删除版本号为当前事务版本号；
MVCC查询逻辑：
    a）查找行版本小于等于当前事务版本号的记录，确保读取的记录是当前事务开启前的数据或者是当前事务自己修改后的数据；
    b）查找删除版本号要么为NULL，要么大于当前事务版本号的记录，确保读取的记录在事务开启前没有被删除；
a）读未提交：不加锁；
b）读已提交：MVCC模式；
c）可重复读：MVCC模式（基于乐观锁实现），每一行都有两个隐藏列：创建时间和删除时间，实际保存的是版本号，记为行版本和删除版本，参照MVCC读取规则；
d）串行化：单线程执行，读加共享锁，写加排他锁；
FutureTask：finally做的工作：runner置为null；如果被中断，处理中断（处理方式：调用Thread.yield()让出CPU执行时间）；
FutureTask：set()、setException()、cancel(true/false)执行完后都会执行finishCompletion()，该方法是唤醒所有等待在waiters(WaitNode)
上面的线程，注意：节点是首节点插入，但是唤醒是从首节点开始的，所以唤醒满足后进先唤醒原则；
cancel(true/false)：只要状态不为NEW或者CAS NEW状态失败，就返回false；
解决数据库跨库查询方法：1）聚合服务封装查询；2）多数据源查询（就是一个微服务配置多个数据源）；3）My Cat；4）数据库中间件Sharding-Shpere；
hash算法好坏评判标准：
    1）平衡性（缓存分配到所有机器上，虚拟节点解决平衡性问题）；
    2）单调性（如果有新机器加入集群，已分配的缓存应该保持原样或者重新分配到新机器上）；
    3）分散性；
    4）负载；
一致性hash算法：0-2^32-1环形空间；
NIO也阻塞，只不过相比较于BIO，NIO是select方法阻塞，BIO则是read、write阻塞；
epoll：
    a）epoll_create（创建epoll对象）；
    b）epoll_ctl（socket添加epoll对象红黑树，注册回调函数，回调函数用于将就绪事件添加到双向链表）；
    c）epoll_wait（就绪事件的连接添加到双向链表里面）；
epoll两种模式：LT（事件没处理完，重复进双向链表）；ET（只进一次双向链表）；