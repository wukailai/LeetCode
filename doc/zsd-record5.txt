元数据空间取消永久代之后，不会再有java.lang.OutOfMemoryError: PermGen问题，元数据空间只受可用的本地内存限制；
元数据空间不必像之前那样设置死，JVM运行时可以动态调整；
元数据空间不必与JVM连续，而是分配在本地内存里面，本地内存是供JVM自身进程使用的；
TreeMap基于红黑树实现，key都要实现Comparable接口（或者TreeMap给定一个Comparator实现），默认升序排序；
TreeMap实现降序，加一个负号即可：return -param1.compareTo(param2);
数据库字段不用NULL的原因：
    a）NOT IN、!= 等负向条件查询在有NULL值的情况下返回永远为空结果，查询容易出错；
    b）索引列不要出现null；
    c）a + b字段拼接只要a、b任意一个为null，拼接结果都为null；
    d）null不会参与count函数的统计；
    e）=null判断会查询不到结果，需要用is null来判断；
    f）null需要额外的存储空间：是否为null标识位；
java1.7将常量池从方法区移到了堆中；
intern()方法：java1.6把字符串放入方法区常量池并返回地址；java1.7把字符串放入堆常量池，并返回首次创建时候的堆内存的地址；
同步非阻塞NIO：服务器每次去轮询fd集合，没有数据立刻返回；
IO多路复用：通过select、poll、epoll来获取fd列表，遍历有事件的fd进行accept/recv/send，使其能支持更多的并发连接请求；
select缺点：1）处理FD数量有上限、2）每次select，fd集合从用户态拷贝到内核态；3）轮询效率低，返回的是所有fd列表；
poll缺点：除了没有FD数量上限，其他和select一样；
epoll缺点：只能在linux环境下运行；
数据结构：select：bitmap；poll：数组；epoll：红黑树+双向链表；
解决分布式session问题：使用redis或者mysql来解决；
LinkedList底层：双向链表，不可随机访问，即没有实现RandomAccess接口；
TreeMap底层：红黑树；
WeakHashMap、ThreadLocalMap：键都是弱引用对象；
ES倒排索引：根据文本关键字集合找ID；
LinkedBlockingQueue的head（对应尾节点last）节点也是一个空节点；
间隙锁（Gap Lock）是Innodb在可重复读提交下为了解决幻读问题时引入的锁机制；
GET请求大小限制：浏览器对url长度有限制；
POST请求大小限制：原则上没有限制，tomcat默认2M，但是可设置；
ASCII：127位，包括控制码；
GB2312 -> GBK（新增繁体字） -> GB18030（新增少数民族的字）；
UNICODE：统一各国不同编码；所有两个字节，对于英文，高8位永远为0，因此会浪费一半空间，Unicode只是一个编码字符集，并没有制定具体的编码方式；
UTF-16（变长编码1-2个字节）：两个字节，实际上65535的上限已经不够了；
UTF-32：固定四个字节；
UTF-8（变长编码1-4个字节）：可能是一个字节（存英文，前8位与ASCII一致），对于中文，一个汉字占3-4个字节；
Mysql:TEXT上限64KB；
Mysql：varchar单位是字符（4.0以上，4.0之前是字节）；
只有当阻塞创造了更多的执行机会时，更多的线程数才能发挥出更好的性能；