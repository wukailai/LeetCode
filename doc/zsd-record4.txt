linux中，每一个进程在内核中，都对应有一个“打开文件”数组，存放指向文件对象的指针，而fd是这个数组的下标，
我们对文件进行操作时，系统调用，将fd传入内核，内核通过fd找到文件，对文件进行操作；
netty实现了零拷贝：在堆之外开辟一块内存，数据直接从IO读到内存中，netty可以通过ByteBuf直接对内存数据进行操作；
普通的拷贝：磁盘需要先拷贝到页缓冲区，网络需要先拷贝到socket缓冲区；
IO多路复用技术实现：select、poll、kqueue、epoll；
redis的IO复用默认是基于epoll实现的，但同时也提供了kqueue和select的实现；
闭锁：CountDownLatch；
epoll特点：
    a）epoll没有最大并发连接的限制，上限是最大可以打开文件的数目；
    b）效率提升，epoll最大的优点就在于它只管活跃的连接，而跟连接总数无关；
    c）内存拷贝，epoll在这点上使用了共享内存，这个内存拷贝也省略了；
    d）epoll通过回调机制将就绪事件添加到双向链表里面；
    e）执行epoll_ctl时，如果增加socket句柄，则检查在红黑树中是否存在，存在立即返回，不存在则添加到树干上，然后向内核注册回调函数，
    用于当中断事件来临时向准备就绪链表中插入数，执行epoll_wait时立刻返回准备就绪链表里的数据即可；
    f）LT（水平出发）模式下，只要一个句柄上的事件一次没有处理完，会在以后调用epoll_wait时次次返回这个句柄，而ET（边缘触发）模式仅在第一次返回，
    实现细节：ET向用户态返回双向链表后直接清空双向链表，LT会检查+回放未处理事件，所以ET更加高效；
I/O多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符就绪，能够通知程序进行相应的操作：
    a）select的本质是采用32个整数的32位，即32*32=1024来标识，fd值为1-1024；
    b）通过一个pollfd数组向内核传递需要关注的事件，故没有描述符个数的限制，pollfd中的events字段和revents分别用于标示关注的事件和发生的事件，
    故pollfd数组只需要被初始化一次；
    c）epoll内核中维持了fd的列表（select和poll都是在用户态维护，然后传递到内核中），epoll包含三个系统调用：
    epoll_create + epoll_ctl + epoll_wait；
select/poll的几大缺点：
    1、每次调用select/poll，都需要把fd集合从用户态拷贝到内核态，这个开销在fd很多时会很大；
    2、同时每次调用select/poll都需要在内核遍历传递进来的所有fd，这个开销在fd很多时也很大；
    3、针对select支持的文件描述符数量太小了，默认是1024；
    4、select返回的是含有整个句柄的数组，应用程序需要遍历整个数组才能发现哪些句柄发生了事件；
    5、select的触发方式是水平触发，应用程序如果没有完成对一个已经就绪的文件描述符进行IO操作，那么之后每次select调用还是会将这些文件描述符通知进程；
Spring Bean循环依赖如何解决的
MyBatis⼆级缓存如何实现的
Redis Cluster集群如何选主的
Sentinel 哨兵模式是如何选主的