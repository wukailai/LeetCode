linux中，每一个进程在内核中，都对应有一个“打开文件”数组，存放指向文件对象的指针，而fd是这个数组的下标，
我们对文件进行操作时，系统调用，将fd传入内核，内核通过fd找到文件，对文件进行操作；
netty实现了零拷贝：在堆之外开辟一块内存，数据直接从IO读到内存中，netty可以通过ByteBuf直接对内存数据进行操作；
普通的拷贝：磁盘需要先拷贝到页缓冲区，网络需要先拷贝到socket缓冲区；
IO多路复用技术实现：select、poll、kqueue、epoll；
redis的IO复用默认是基于epoll实现的，但同时也提供了kqueue和select的实现；
闭锁：CountDownLatch；
epoll特点：
    a）epoll没有最大并发连接的限制，上限是最大可以打开文件的数目；
    b）效率提升，epoll最大的优点就在于它只管活跃的连接，而跟连接总数无关；
    c）内存拷贝，epoll在这点上使用了共享内存，这个内存拷贝也省略了；
    d）epoll通过回调机制将就绪事件添加到双向链表里面；
    e）执行epoll_ctl时，如果增加socket句柄，则检查在红黑树中是否存在，存在立即返回，不存在则添加到树干上，然后向内核注册回调函数，
    用于当中断事件来临时向准备就绪链表中插入数，执行epoll_wait时立刻返回准备就绪链表里的数据即可；
    f）LT（水平出发）模式下，只要一个句柄上的事件一次没有处理完，会在以后调用epoll_wait时次次返回这个句柄，而ET（边缘触发）模式仅在第一次返回，
    实现细节：ET向用户态返回双向链表后直接清空双向链表，LT会检查+回放未处理事件，所以ET更加高效；
I/O多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符就绪，能够通知程序进行相应的操作：
    a）select的本质是采用32个整数的32位，即32*32=1024来标识，fd值为1-1024；
    b）通过一个pollfd数组向内核传递需要关注的事件，故没有描述符个数的限制，pollfd中的events字段和revents分别用于标示关注的事件和发生的事件，
    故pollfd数组只需要被初始化一次；
    c）epoll内核中维持了fd的列表（select和poll都是在用户态维护，然后传递到内核中），epoll包含三个系统调用：
    epoll_create + epoll_ctl + epoll_wait；
select/poll的几大缺点：
    1、每次调用select/poll，都需要把fd集合从用户态拷贝到内核态，这个开销在fd很多时会很大；
    2、同时每次调用select/poll都需要在内核遍历传递进来的所有fd，这个开销在fd很多时也很大；
    3、针对select支持的文件描述符数量太小了，默认是1024；
    4、select返回的是含有整个句柄的数组，应用程序需要遍历整个数组才能发现哪些句柄发生了事件；
    5、select的触发方式是水平触发，应用程序如果没有完成对一个已经就绪的文件描述符进行IO操作，那么之后每次select调用还是会将这些文件描述符通知进程；
mybatis缓存：
    a）一级缓存：
        1）SqlSession（数据库会话）级别，每个SqlSession类的实例对象中有一个数据结构（HashMap，SqlSession->Executor->PerpetualCache）
        可以用来存储缓存数据；
        2）如果sql和参数完全一致，直接从SqlSession对象读取缓存结果（缓存有实效性）；
        3)SqlSession执行了一个修改操作（update/delete/insert），SqlSession会清空PerpetualCache；
    b）二级缓存；
        1）mapper级别，SqlSessionFactory对象的缓存，多个SqlSession类的实例对象可以共用二级缓存，二级缓存是跨SqlSession的，一个Mapper
        有一个自己的二级缓存区域（按照namespace划分），两个Mapper的namespace如果相同，那么这两个Mapper执行的sql查询会被缓存在同一个二级缓存中；
        2）要求POJO必须可序列化，即实现Serializable接口；
        3）默认LRU算法更新缓存；
降级：保证核心服务，牺牲非核心服务，必要时进行熔断；
标记整理：将内存等分；本地方法栈；
Class的类加载机制实现线程安全单例，比如new一个对象就是一个原子化操作；
灰度发布：能支持按机器维度进行小流量部署，观察系统日志和业务指标，等运行平稳后再推全量；
分布式自增长ID解决方案：
    a）UUID：全球唯一的特性；缺点：不具备自增特性、没有实际业务意义、太长占用空间；
    b）专门的自增长ID数据库：缺点：单机有宕机风险；
    c）自增长ID数据库集群，通过设置起始ID和步长来控制，增加容错率；比如两台服务器一台起始ID：1；步长：2、另一台起始ID：2；步长：2；缺点：不利于扩容；
    d）基于数据库的号段模式，每次获取一个范围，如[1, 1000]，每次采用乐观锁的方式更新version字段，程序拿到号段后再在内存里面进行分配；优点：大大减少了数据库访问频率；
    e）redis的incr命令实现ID的原子性自增，redis采用RDB持久化机制会有风险；
    f）雪花算法模式，可以保证在一毫秒内生成4096个ID；
    g）百度的uid-generator（基于雪花算法，与数据库配合使用）、美团的Leaf（同时支持雪花算法和号段模式）、滴滴的Tinyid（类似于Leaf）；
NIO基于管道+缓冲区来实现数据处理；
ServerSocketChannel、SocketChannel默认阻塞模式，设置为非阻塞模式需要显示调用；
NIO读写切换（position、limit重新定位）：flip写切换为读，clear读切换为写，rewind重新读（读模式下，仅position设为0），compact
比clear要温柔一些，它会把没读到的数据复制到数组头部；
OP_WRITE：当底层缓冲区有空闲空间的情况下，因为写缓冲区在绝大部分时候都是有空闲空间的；
OP_ACCEPT：服务端等待客户端的连接请求，ServerSocketChannel的有效事件；
OP_CONNECT：SocketChannel的有效事件；
HashSet的底层是基于HashMap来实现的，HashSet存放的数据实际就是hashMap的key；
HashMap的value存放的是一个静态的final对象PERSENT（new Object()）；
redis数据结构：
    1）string，三种编码方式：int（对应long数据结构，整数）、raw（超过44字节，对应SDS数据结构（简单动态字符串），内存分配或者释放两次）
    、embstr（不超过44字节，对应SDS数据结构（简单动态字符串），内存分配或者释放一次）；
    2）list，两种编码方式：ziplist（压缩链表，限制：所有字符串长度小于64字节，元素数量小于512）和linkedlist（双端链表）；
    3）hash：ziplist（压缩链表，限制：所有字符串长度小于64字节，元素数量小于512）、hashtable（dict字典）；
    4）set：intset编码（整数集合）、hashtable编码（dict字典）；
    5）zset：ziplist编码（压缩链表）、skiplist编码（跳表+字典）；
压缩链表优势：节约空间、减少内存碎片、增删改查时间复杂度O(N)；
AOF利用rewrite压缩来避免命令重复写入AOF文件里面；
mysql语句实现乐观锁：
    1）select version from table where id=#{id}；
    2）update table set status=2, version=version+1 where id=#{id} and version=#{version};
？表示类型不确定，只能用于声明变量或者形参上；
使用FOR UPDATE和LOCK IN SHARE MODE在SELECT语句上加锁；