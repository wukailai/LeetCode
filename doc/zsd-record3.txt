分库分表中，数据库主键使用分布式的高并发唯一id生成器来生成；
mysql优化方式之一：使用先使用范围查询定位id（或者索引），然后再使用索引进行定位数据，能够提高好几倍查询速度。即先 select id，然后再 select *；
服务器优化方向：
    a）增加负载均衡服务器（让扩容也变得简单起来）；
    b）缓存静态文件（不常变化的文件，如图片、html文件）；
    c）缓存放在距离用户更近、性能更好的服务器（性能兼顾速度和运行负载）；
    d）压缩数据；
    e）实时监控及时发现问题；
锁优化：
    a）减少锁执行时间；
    b）减少锁的粒度；
    c）锁分离；
    d）锁降级；
    e）锁粗化：减少加锁、释放锁次数；
    f）锁消除；
常见的消息模式：
    a）消息队列模式；
        i）实现生产者与消费者之间的解耦；
        ii）一个消息只能被一个消费者消费；
        iii）消费者如果处理消息失败，消息系统一般会把这个消息放回队列，这样其他消费者可以继续处理；
    b）发布/订阅模式；
        i）单个消息可以被多个订阅者并发获取和处理；实现逻辑：消息被生产后，复制到多个队列中；
        ii）RabbitMQ中的主题（Object）就是发布/订阅模式的一种具体实现；
        iii）订阅分为两种：临时订阅和持久订阅；
        vi）RabbitMQ使用交换器来实现发布/订阅模式；
RabbitMQ实现原理：
    1）发布者直接把消息发布到交换器上而不需要知道消息有哪些订阅者；
    2）每一个订阅了交换器的消费者都会创建一个队列，交换器会把消息放入队列以供消费者消费；
    3）消息交换器也可以基于各种路由规则为一些订阅者过滤消息；
    4）RabbitMQ的消费者可以以组队的方式（消费者组）竞争处理队列上的消息；
    5）RabbitMQ内置重试逻辑和死信（dead-letter）交换器；
    6）对于发送到队列或者交换器上的消息，RabbitMQ不保证它们的顺序，消息放回也会打乱顺序，多个消费者消费一个队列也会造成顺序错乱；
    7）可以设置消息存活时间（TTL），预期时间内消息没有被消费，消息会从队列中被移除；
    8）支持延迟或者预定消息；
Kafka：
    1）Kafka是一种分布式流式系统；
    2）Kafka的存储层是使用分区事务日志来实现的；
    3）Kafka按照类别存储记录集，并且把这种类别称为主题，Kafka为每个主题维护一个消息分区日志，
    每个分区都是由有序的不可变的记录序列组成，并且消息都是连续的被追加在尾部；
    4）Kafka使用轮询分区器（partitioner）把消息一致的分配到多个分区上；
    5）消费者通过维护分区的偏移（或者说索引）来顺序的读出消息，然后消费消息；
    6）单个消费者可以消费多个不同的主题；
    7）消费同一个主题的多个消费者构成的组称为消费者组；
    8）消费者维护自己的分区偏移，持久订阅在重启之后不会丢失偏移；
    9）Kafka能够保证发送到相同主题分区的所有消息都能够按照顺序处理；
    10）Kafka在处理消息之前是不允许消费者过滤一个主题中的消息；
    11）Kafka设计之初就是保存消息的；
优先选择RabbitMQ的条件：
    1）高级灵活的路由规则；
    2）消息时序控制（控制消息过期或者消息延迟）；
    3）高级的容错处理能力，在消费者更有可能处理消息不成功的情景中（瞬时或者持久）；
    4）更简单的消费者实现；
优先选择Kafka的条件：
    1）严格的消息顺序；
    2）延长消息留存时间，包括过去消息重放的可能；
    3）传统解决方案无法满足的高伸缩能力；
正向代理代理客户端（VPN），反向代理代理服务器（负载均衡）；
TCC（Try-Confirm-Cancel）分布式事务：设置中间状态 + ConfirmService（确认） + CancelService（回滚），Confirm、Cancel一直不成功会一直重试；
TTC事务活动日志（存数据库或者磁盘文件）会记录事务运行阶段和状态；
mysql自增ID用完，会停止自增，所以会报主键冲突错误；
mysql事务原理：事务开启之后，所有的操作都会临时保存到事务日志中，事务日志只有在得到commit命令才会同步到数据表中，
其他任何情况都会清空事务日志(rollback、断开连接两种情况)；
Myisam：批量插入速度比INNODB要快；
sql优化（大方向）：
    a）用好索引；
    b）适当冗余，空间换时间；
    c）避免适应外键，程序约束；
    d）数据库语句避免使用函数，程序处理；
    e）大事务尽量拆分为小事务；
sql小技巧（具体）：
    a）避免使用select *，如果非得使用select *，可以先进行索引定位；
    b）between代替in；
    c）join好于where，因为不需要创建临时表；
    d）group单独使用会排序（影响性能），在group by后面增加order by null就可以防止排序；
    e）判断记录是否存在用SELECT 1 ... LIMIT 1 代替SELECT * ...；
    f）避免使用NULL；
    g）数据类型选用；
    h）text类型单独分表；
    i）!=、<>替换为> UNION ALL <；
    j）条件1 or 条件2替换为 条件1 union 条件2；
    k）不做列运算；
    l）LIKE关键字前面有%不会用到索引；
mysql使用主从服务器来实现读写分离，主服务器负责写，从服务器负责读；
java +连接符是通过StringBuilder的append + toString6在堆里重新创建一个对象实现的；
Nginx用途：Web服务器、反向代理、负载均衡、限流（使用漏桶算法）；
redis支持的数据类型：string、hash、list、set、zset；
redis架构模式：
    1）主从同步：master、slave数据相同，主从服务器之间保持数据连接，主服务器负责数据同步。读写分离，主服务器负责写，从服务器负责读；
    2）哨兵模式：哨兵（独立进程）负责监控主从服务器状态，master宕机，通过算法指派一台salve成为master，同时通知其他slave修改master配置；
    3）集群：
        a）proxy型：客户端和redis之间新增代理服务器；
        b）直连型：所有redis服务器之间相互连接组成集群；
redis中的list实现异步队列：
    1）rpush/lpop、lpush/rpop（队列为空时，空转）；
    2）rpush/blpop、lpush/brpop，队列为空时阻塞，数据一旦放入队列，从阻塞立马醒来，几乎没有延时；
redis使用单线程却可以支撑高并发的原因：IO多路复用技术；
线程等待时间所占比例越高，需要越多线程（即使在单CPU条件下，多线程可以比单线程获得更快的执行结果）；线程CPU时间所占比例越高，需要越少线程；
纯CPU密集任务，理论上应该创建CPU个数的线程（并发编程建议CPU个数 + 1，因为即使有一个线程发生错误，多出来的那个线程可以顶上）；
IO密集任务，创建线程个数：1 + IO耗时 / CPU耗时；如果多个CPU，创建线程个数 = CPU数 * （1 + IO耗时 / CPU耗时）；
计算器使用页（4KB）读取原因：一个程序在访问了一条数据之后，在之后会有极大的可能再次访问这条数据和访问这条数据的相邻数据；
mysql页目录优化单页数据查询；
B+树三层大概可以放2000万条数据：一个页大小16KB，16*1024个字节，int主键8个字节，指针大小6个字节，所以一个页可以存放指针数目16*1024/(6+8)=1170
，二层B+树可以保存数据行数（假设一行占1KB）=1170*(16KB/1KB)=18720，二层B+树可以保存数据行数=1170*1170*16=21902400；
分页查询很重要，如果查询数据量超过30%，MYSQL不会使用索引；
回表操作：不能直接从索引获取最终查找结果，需要返回到主键聚集索引里面获取字段，常见于SELECT *；覆盖索引：可以直接从索引获取最终查找结果；
mysql为什么用B+树不用B树，B树非叶子节点还存放数据，导致非叶子节点存放的指针就少，指针少又要保存大量数据就只能通过增加树的高度来解决；
jsoncode（$.json.b.www，如果仅使用某一个或几个字段，或是包括一些基本的运算，jsoncode有很大优势）便捷于fastjson；
当limit offset rows中的offset很大时，会出现效率问题，示例：select * from test where val=4 limit 300000,5。
优化：select * from test a inner join (select id from test where val=4 limit 300000,5) b on a.id=b.id;
java8流式处理：转换成流（集合流、数组流、文件流） + 中间操作（filter、distinct、limit、sorted、skip、map等操作） +
终端操作（collect、count、allMatch、anyMatch、noneMatch、findFirst、findAny、forEach等操作）；